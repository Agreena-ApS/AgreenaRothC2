res <-
list(
"sc_diff" = sum(soilC_s) - sum(soilC_b),
"inp_calib" = inp_calib,
"sc_spinup" = c_init,
"sc_baseline" = soilC_b_all_time,
"sc_scenario" = soilC_s_all_time
)
return(res)
}
RothC_runs <- run_RothC(
fxi_all,
trm_b = trm_b,
trm_s = trm_s,
inp_s = inp_s,
spin_period = spin_period,
sim_period = sim_period
)
end <- Sys.time()
time <- end - start
res <-
list(
"Ini_SOC" = soil$Carbon[1],
"SOC_stock_change" = RothC_runs$sc_diff,
"input_calib" = RothC_runs$inp_calib,
"Mean_input_scenario" = inp_s,
"Longitude_final" = attr(soil, "meta")$Longitude,
"Latitude_final" = attr(soil, "meta")$Latitude,
"Longitude_init." = lonlat[1],
"Longitude_init." = lonlat[2],
"Soil_type" = attr(soil, "meta")$SoilType,
"Mean_30cm_clay_%" = mean(soil$ParticleSizeClay[1:3]),
"Mean_TS" = colMeans(wth[, "TS_AV"]),
"Mean_PR" = colMeans(wth[, "PRECTOTCORR_AV"]),
"Mean_ET" = colMeans(wth[, "EVPTRNS_AV"]),
"Unit_SOC" = "",
"time_elapsed" = time,
"soilC_baseline" = RothC_runs$sc_baseline,
"soilC_scenario" = RothC_runs$sc_scenario,
"coefficients" = coeffs
)
return(res)
}
# Serial runs
out <- list()
out_post <- data.frame("field_id" = NA, "year_intpl" = NA, "first_year" = NA)
sim_period <- c("2022-01-01", "2032-01-01")
for (i in 1:nrow(field_data)) {
# print(i)
out[[i]] <- AgreenaProgramme2(
lonlat = c(field_data$field_longitude[i], field_data$field_latitude[i]),
sim_period = sim_period,
country = NULL,
inp_s = field_data$add_bio_inpts[i], # should it be calculated with expected yileds or gross net Yields?
fym_s = field_data$add_fym_inpts[i],
cp_b = field_data$field_def_cover_crops_adoption[i],
cp_s = field_data$actual_cover_crops_adoption[i],
till_b = field_data$field_def_tilling[i],
till_s = field_data$actual_tilling[i],
soil_data = "isric",
soiltype = field_data$field_def_soil_texture[i]
)
out_post[i,] <- cbind("field_id" = field_data$field_id[i], post_processing(out[[i]]))
}
library(httr)
library(jsonlite)
get_coeffs <- function(lon, lat) {
retrive_api <- function(lon,lat){
coeficient_request_body <- paste0('{
"collections": [
"climate_zone_coefficients"
],
"intersects": {
"coordinates": [',lon,",",lat, '],
"type": "Point"
}
}')
res <- POST("https://stac-api-ab6bkjb4oq-nw.a.run.app/search", body = coeficient_request_body, encode = "json")
data = fromJSON(rawToChar(res$content))
coeffs <- data$features$properties$coefficients
return(coeffs)
}
coeffs <- retrive_api(lon, lat)
# n <- 10
# c <- 0.001
# if (is.null(coeffs)) {
#   while (is.null(coeffs)) {
#     print(c(lat, lon))
#     lon <- runif(n, min = lon - c, max = lon + c)
#     lat <- runif(n, min = lat - c, max = lat + c)
#     lonlat_grid <- expand.grid(lon, lat)
#     lonlat <- lonlat_grid[sample(1:n^2, n), ]
#     for (i in 1:n) {
#       lon <- as.numeric(lonlat[i, 1])
#       lat <- as.numeric(lonlat[i, 2])
#       rest.data <- retrive_api(lon, lat)
#       if (!is.null(coeffs)) {
#         warning(paste("Coordinates where altered from (lon, lat):", lon_initial, lat_initial, "->", lon, lat))
#         break
#       }
#     }
#     c <- sqrt(c + c)
#   }
# }
return(coeffs)
}
library(AgreenaRothC)
rm(list = ls())
setwd("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/")
#==========================
# Loading Packages
#==========================
list.of.packages <- c(
"foreach",
"doParallel",
"ranger",
"palmerpenguins",
"tidyverse",
"kableExtra",
"SoilR",
"AgreenaRothC",
"readr"
)
for(package.i in list.of.packages){
suppressPackageStartupMessages(
library(
package.i,
character.only = TRUE
)
)
}
# ==========================
# Loading raw data
# ==========================
# field_data <- read_csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/Sum_of_Baseline_cft__1676997673635.csv") #Old pre QAQC
field_data <- read_csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/Sum_of_Baseline_cft__1682690532554.csv") #New post QAQC fields approved
field_data <- field_data[field_data$field_harvest_year == 2022, ]
# ==========================
# calc fertilizers
# ==========================
org_c <- read.csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/org_fert_c_rate.csv")
# we need better assumptions for fertilizers!!!
org_c[org_c$Organic.Fertlizer == "Cattle Digestate 0.26%N","X.C"] <- 5.1142 # calculated based on CN ration from suzanas fertilizer table
org_c[org_c$Organic.Fertlizer == "Compost (non-fully aerated Production) 1%N","X.C"] <- 15 # using the same value of other composts
org_c[org_c$Organic.Fertlizer == "Pig Digestate - 0.36%N","X.C"] <- 4.7304 # calculated based on CN ration from suzanas fertilizer table
rownames(org_c) <- org_c[, 2]
# fert <- read_csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/Sum_of_Fertiliser_ac_1671442752279.csv") #Old pre QAQC
# fert <- read_csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/Sum_of_Fertiliser_ac_1682690879886.csv") #New post QAQC fields approved
fert <- read_csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/Sum_of_Fertiliser_ac_1683044801748.csv")
fert[is.na(fert$actual_harvest_year), "actual_harvest_year"] <- 9999
fert <- fert[fert$actual_harvest_year == 2022, ]
fert <- fert[fert$actual_fertilisers_mixed != "Only synthetic", ]
fert <- fert[, c(
"field_id", grep("actual_fertiliser_id_", names(fert), value = T),
grep("fertiliser_actual_application_rate", names(fert), value = T),
grep("fertiliser_actual_fertiliser_name", names(fert), value = T)
)]
fert_nam <- pivot_longer(fert, cols = contains("fertiliser_actual_fertiliser_name_0"), names_to = letters[1:5], names_sep = "_", values_to = "name") %>%
select("name") # %>% mutate(name = gsub(" ","",tolower(name),fixed = TRUE))
fert_rat <- pivot_longer(fert, cols = contains("fertiliser_actual_application_rate_0"), names_to = letters[1:5], names_sep = "_", values_to = "Application_rate") %>%
select("field_id", "e", "Application_rate")
fert_id <- pivot_longer(fert, cols = contains("fertiliser_actual_fertiliser_id"), names_to = letters[1:5], names_sep = "_", values_to = "fert_id") %>%
select("fert_id")
fert_long <- cbind(fert_rat, fert_nam, fert_id)
fert_long <- fert_long[complete.cases(fert_long), ]
fert_long$c_rate <- org_c[as.character(fert_long$fert_id), 3]
# fert_long <- fert_long[complete.cases(fert_long), ] #should not be neede in this stage
fert_long$c_added <- (fert_long$c_rate/100 * fert_long$Application_rate) / 1000 # kg/ha * %/1000 = tC/ha
fert_long2 <- group_by(fert_long, field_id) %>% summarise(add_fym_field = sum(c_added), n = n())
field_data <- left_join(field_data, fert_long2, "field_id")
# field_problems <- field_data[(field_data$actual_fertilisers_mixed != "Only synthetic" & is.na(field_data$add_fym_field)), ]
# field_data <- field_data[!(field_data$actual_fertilisers_mixed != "Only synthetic" & is.na(field_data$add_fym_field)), ] # removing fields where organic fertilizaer was applied but not properly calculated because of problems in the input tables
#==========================
# Selecting relevant columns
#==========================
sel_col <- c(
"user_id",
"field_id",
"field_size_ha",
"field_longitude",
"field_latitude",
"field_def_country",
"actual_crop_name",
"actual_crop_type_id",
"field_def_soil_texture",
"field_def_crop_gross_yield",
"field_def_fertilisers_mixed",
"actual_crop_net_yield",
"actual_crop_gross_yield",
"field_def_crop_net_yield",
"field_def_avg_temperature",
"field_def_soil_som_specific",
"field_def_cover_crops_adoption",
"actual_cover_crops_adoption",
"field_def_tilling",
"actual_tilling",
"field_def_crop_residue_management_name_short",
"actual_crop_residue_management_name_short",
"calc_baseline_cft_emission_removals_ton_co2e",
"calc_actual_cft_emission_removals_ton_co2e",
"actual_fertilisers_mixed",
"add_fym_field"
)
#=======================
# Features design
#=======================
# loading crop name dict.
crop_names <- read.csv("~/Documents/Git/AgreenaRothC_data/crop_names.csv")[,c(3,4)]
field_data$actual_crop_name <- crop_names[match(field_data$actual_crop_name, crop_names[,1]),2] #translating names to correct form
field_data <- field_data[!is.na(field_data$actual_crop_name),] #removing fields with NA actual crop names meaning they are fallow
# field_data$emission_reductions_net_ton_co2e <- (field_data$calc_baseline_cft_emission_removals_ton_co2e - field_data$calc_actual_cft_emission_removals_ton_co2e) / field_data$field_size_ha
field_data$actual_residues <- yield_to_resid2(field_data$actual_crop_net_yield, field_data$actual_crop_name) # should it be field def crop yiled or actual?
field_data$add_bio_inpts <- ifelse(field_data$field_def_crop_residue_management_name_short %in% c("Removed", "Burned"), ifelse(
field_data$actual_crop_residue_management_name_short %in% c("Mulched"),1,0),
ifelse(field_data$actual_crop_residue_management_name_short %in% c("Mulched"),0,-1)) * field_data$actual_residues
field_data$add_fym_inpts <- ifelse(field_data$field_def_fertilisers_mixed %in% c("only synthetic"), ifelse(
field_data$actual_fertilisers_mixed %in% c("Mixed","Only organic"),1,0),
ifelse(field_data$actual_fertilisers_mixed %in% c("Mixed","Only organic"),0,-1)) * field_data$add_fym_field
# Should not be necessary!
field_data[is.na(field_data$add_fym_inpts),"add_fym_inpts"] <- 0
field_data[is.na(field_data$add_fym_field),"add_fym_field"] <- 0
# field_data <- field_data[complete.cases(field_data),]
# saveRDS(field_data, "/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/verra_estimates/estim_fields_batch_1.rds")
# field_data <- readRDS("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/verra_estimates/estim_fields_batch_1.rds")
#================================================
# Serial runs
out <- list()
out_post <- data.frame("field_id" = NA, "year_intpl" = NA, "first_year" = NA)
sim_period <- c("2022-01-01", "2032-01-01")
for (i in 1:nrow(field_data)) {
# print(i)
out[[i]] <- AgreenaProgramme2(
lonlat = c(field_data$field_longitude[i], field_data$field_latitude[i]),
sim_period = sim_period,
country = NULL,
inp_s = field_data$add_bio_inpts[i], # should it be calculated with expected yileds or gross net Yields?
fym_s = field_data$add_fym_inpts[i],
cp_b = field_data$field_def_cover_crops_adoption[i],
cp_s = field_data$actual_cover_crops_adoption[i],
till_b = field_data$field_def_tilling[i],
till_s = field_data$actual_tilling[i],
soil_data = "isric",
soiltype = field_data$field_def_soil_texture[i]
)
out_post[i,] <- cbind("field_id" = field_data$field_id[i], post_processing(out[[i]]))
}
library(AgreenaRothC)
rm(list = ls())
setwd("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/")
#==========================
# Loading Packages
#==========================
list.of.packages <- c(
"foreach",
"doParallel",
"ranger",
"palmerpenguins",
"tidyverse",
"kableExtra",
"SoilR",
"AgreenaRothC",
"readr"
)
for(package.i in list.of.packages){
suppressPackageStartupMessages(
library(
package.i,
character.only = TRUE
)
)
}
# ==========================
# Loading raw data
# ==========================
# field_data <- read_csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/Sum_of_Baseline_cft__1676997673635.csv") #Old pre QAQC
field_data <- read_csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/Sum_of_Baseline_cft__1682690532554.csv") #New post QAQC fields approved
field_data <- field_data[field_data$field_harvest_year == 2022, ]
# ==========================
# calc fertilizers
# ==========================
org_c <- read.csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/org_fert_c_rate.csv")
# we need better assumptions for fertilizers!!!
org_c[org_c$Organic.Fertlizer == "Cattle Digestate 0.26%N","X.C"] <- 5.1142 # calculated based on CN ration from suzanas fertilizer table
org_c[org_c$Organic.Fertlizer == "Compost (non-fully aerated Production) 1%N","X.C"] <- 15 # using the same value of other composts
org_c[org_c$Organic.Fertlizer == "Pig Digestate - 0.36%N","X.C"] <- 4.7304 # calculated based on CN ration from suzanas fertilizer table
rownames(org_c) <- org_c[, 2]
# fert <- read_csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/Sum_of_Fertiliser_ac_1671442752279.csv") #Old pre QAQC
# fert <- read_csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/Sum_of_Fertiliser_ac_1682690879886.csv") #New post QAQC fields approved
fert <- read_csv("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/Sum_of_Fertiliser_ac_1683044801748.csv")
fert[is.na(fert$actual_harvest_year), "actual_harvest_year"] <- 9999
fert <- fert[fert$actual_harvest_year == 2022, ]
fert <- fert[fert$actual_fertilisers_mixed != "Only synthetic", ]
fert <- fert[, c(
"field_id", grep("actual_fertiliser_id_", names(fert), value = T),
grep("fertiliser_actual_application_rate", names(fert), value = T),
grep("fertiliser_actual_fertiliser_name", names(fert), value = T)
)]
fert_nam <- pivot_longer(fert, cols = contains("fertiliser_actual_fertiliser_name_0"), names_to = letters[1:5], names_sep = "_", values_to = "name") %>%
select("name") # %>% mutate(name = gsub(" ","",tolower(name),fixed = TRUE))
fert_rat <- pivot_longer(fert, cols = contains("fertiliser_actual_application_rate_0"), names_to = letters[1:5], names_sep = "_", values_to = "Application_rate") %>%
select("field_id", "e", "Application_rate")
fert_id <- pivot_longer(fert, cols = contains("fertiliser_actual_fertiliser_id"), names_to = letters[1:5], names_sep = "_", values_to = "fert_id") %>%
select("fert_id")
fert_long <- cbind(fert_rat, fert_nam, fert_id)
fert_long <- fert_long[complete.cases(fert_long), ]
fert_long$c_rate <- org_c[as.character(fert_long$fert_id), 3]
# fert_long <- fert_long[complete.cases(fert_long), ] #should not be neede in this stage
fert_long$c_added <- (fert_long$c_rate/100 * fert_long$Application_rate) / 1000 # kg/ha * %/1000 = tC/ha
fert_long2 <- group_by(fert_long, field_id) %>% summarise(add_fym_field = sum(c_added), n = n())
field_data <- left_join(field_data, fert_long2, "field_id")
# field_problems <- field_data[(field_data$actual_fertilisers_mixed != "Only synthetic" & is.na(field_data$add_fym_field)), ]
# field_data <- field_data[!(field_data$actual_fertilisers_mixed != "Only synthetic" & is.na(field_data$add_fym_field)), ] # removing fields where organic fertilizaer was applied but not properly calculated because of problems in the input tables
#==========================
# Selecting relevant columns
#==========================
sel_col <- c(
"user_id",
"field_id",
"field_size_ha",
"field_longitude",
"field_latitude",
"field_def_country",
"actual_crop_name",
"actual_crop_type_id",
"field_def_soil_texture",
"field_def_crop_gross_yield",
"field_def_fertilisers_mixed",
"actual_crop_net_yield",
"actual_crop_gross_yield",
"field_def_crop_net_yield",
"field_def_avg_temperature",
"field_def_soil_som_specific",
"field_def_cover_crops_adoption",
"actual_cover_crops_adoption",
"field_def_tilling",
"actual_tilling",
"field_def_crop_residue_management_name_short",
"actual_crop_residue_management_name_short",
"calc_baseline_cft_emission_removals_ton_co2e",
"calc_actual_cft_emission_removals_ton_co2e",
"actual_fertilisers_mixed",
"add_fym_field"
)
#=======================
# Features design
#=======================
# loading crop name dict.
crop_names <- read.csv("~/Documents/Git/AgreenaRothC_data/crop_names.csv")[,c(3,4)]
field_data$actual_crop_name <- crop_names[match(field_data$actual_crop_name, crop_names[,1]),2] #translating names to correct form
field_data <- field_data[!is.na(field_data$actual_crop_name),] #removing fields with NA actual crop names meaning they are fallow
# field_data$emission_reductions_net_ton_co2e <- (field_data$calc_baseline_cft_emission_removals_ton_co2e - field_data$calc_actual_cft_emission_removals_ton_co2e) / field_data$field_size_ha
field_data$actual_residues <- yield_to_resid2(field_data$actual_crop_net_yield, field_data$actual_crop_name) # should it be field def crop yiled or actual?
field_data$add_bio_inpts <- ifelse(field_data$field_def_crop_residue_management_name_short %in% c("Removed", "Burned"), ifelse(
field_data$actual_crop_residue_management_name_short %in% c("Mulched"),1,0),
ifelse(field_data$actual_crop_residue_management_name_short %in% c("Mulched"),0,-1)) * field_data$actual_residues
field_data$add_fym_inpts <- ifelse(field_data$field_def_fertilisers_mixed %in% c("only synthetic"), ifelse(
field_data$actual_fertilisers_mixed %in% c("Mixed","Only organic"),1,0),
ifelse(field_data$actual_fertilisers_mixed %in% c("Mixed","Only organic"),0,-1)) * field_data$add_fym_field
# Should not be necessary!
field_data[is.na(field_data$add_fym_inpts),"add_fym_inpts"] <- 0
field_data[is.na(field_data$add_fym_field),"add_fym_field"] <- 0
# field_data <- field_data[complete.cases(field_data),]
# saveRDS(field_data, "/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/verra_estimates/estim_fields_batch_1.rds")
# field_data <- readRDS("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/verra_estimates/estim_fields_batch_1.rds")
#================================================
# Serial runs
out <- list()
out_post <- data.frame("field_id" = NA, "year_intpl" = NA, "first_year" = NA)
sim_period <- c("2022-01-01", "2032-01-01")
for (i in 1:nrow(field_data)) {
# print(i)
out[[i]] <- AgreenaProgramme2(
lonlat = c(field_data$field_longitude[i], field_data$field_latitude[i]),
sim_period = sim_period,
country = NULL,
inp_s = field_data$add_bio_inpts[i], # should it be calculated with expected yileds or gross net Yields?
fym_s = field_data$add_fym_inpts[i],
cp_b = field_data$field_def_cover_crops_adoption[i],
cp_s = field_data$actual_cover_crops_adoption[i],
till_b = field_data$field_def_tilling[i],
till_s = field_data$actual_tilling[i],
soil_data = "isric",
soiltype = field_data$field_def_soil_texture[i]
)
out_post[i,] <- cbind("field_id" = field_data$field_id[i], post_processing(out[[i]]))
}
for (i in 1:nrow(field_data)) {
# print(i)
out[[i]] <- AgreenaProgramme2(
lonlat = c(field_data$field_longitude[i], field_data$field_latitude[i]),
sim_period = sim_period,
country = NULL,
inp_s = field_data$add_bio_inpts[i], # should it be calculated with expected yileds or gross net Yields?
fym_s = field_data$add_fym_inpts[i],
cp_b = field_data$field_def_cover_crops_adoption[i],
cp_s = field_data$actual_cover_crops_adoption[i],
till_b = field_data$field_def_tilling[i],
till_s = field_data$actual_tilling[i],
soil_data = "isric",
soiltype = field_data$field_def_soil_texture[i]
)
out_post[i,] <- cbind("field_id" = field_data$field_id[i], post_processing(out[[i]]))
}
library(AgreenaRothC)
out_post
getwd()
saveRDS(out, "out.rds")
saveRDS(out_post, "out_post.rds")
write.csv(out_post, "Summarized_output.csv")
View(field_data)
View(out_post)
hist(out_post$year_intpl -out_post$first_year)
summary(out_post$year_intpl -out_post$first_year)
data_out
# ==========================
# Calibration Script
# ==========================
library(nloptr)
library(googlesheets4)
library(AgreenaRothC)
library(stringr)
library(SoilR)
library(caret)
library(Metrics)
library(dplyr)
library(ggpubr)
library(patchwork)
set.seed(123)
setwd("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data")
plots_path <- "/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/plots"
# cf1 = Slope yield inputs
# cf2 = Intercept yield inputs
# cf3 = DR ratio
# cf4 = Decomposition rate
# cf5 = Evapotranspiration coeffj
# saveRDS(data_source, "/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/data_source.rds")
data_source <- readRDS("/Users/marcospaulopedrosaalves/Documents/Git/AgreenaRothC_data/data_source.rds")
# ==========================
# Optimization function
# ==========================
optm_fun <- function(params) {
simulated_data <- rep(NA, nrow(x_train))
tryCatch(
expr = {
for (i in 1:nrow(x_train)) {
# message(paste("Running:", x_train[i,"Field ID"]))
simulated_data[i] <- sum(tail(ag_rothC(x_train[i, ]
#  cf1 = params[1]
# ,cf2 = params[2]
,cf3 = params[1]
,cf4 = params[2]
,cf5 = params[3]
,write = FALSE), 1))
}
},
error = function(e) {
message(paste("Field ID:", x_train[i, "Field ID"]))
print(e)
}
)
res <- sum((simulated_data - y_train)^2) / length(simulated_data)
# print(res)
return(res)
}
# ==========================
# Test function
# ==========================
simulations <- function(params, test_data) {
simulated_data <- rep(NA, nrow(test_data))
names(simulated_data) <- test_data$`Field ID`
for (i in 1:nrow(test_data)) {
simulated_data[i] <- sum(tail(ag_rothC(test_data[i, ]
#  cf1 = params[1]
# ,cf2 = params[2]
,cf3 = params[1]
,cf4 = params[2]
,cf5 = params[3]
), 1))
}
return(simulated_data)
}
# ==========================
# Bias calculation function
# ==========================
bias <- function(actual, predicted) {
if (length(actual) != length(actual)) {
stop("vector with actual and preduction have different sizes")
}
actual <- as.numeric(actual)
res <- sum(predicted - actual) / length(predicted)
return(res)
}
bias
View(data_source)
16/3
10/5
5/3
library(AgreenaRothC)
library(AgreenaRothC2)
library(AgreenaRothC2)
library(AgreenaRothC2)
library(AgreenaRothC2)
library(CalibValidRothC)
library(AgreenaRothC2)
library(CalibValidRothC)
resid_mgmt
library(AgreenaRothC2)
pkgload::dev_help('resid_mgmt')
pkgload::load_all()
pkgload::dev_help('resid_mgmt')
pkgload::dev_help('tillage_convert')
library(AgreenaRothC2)
